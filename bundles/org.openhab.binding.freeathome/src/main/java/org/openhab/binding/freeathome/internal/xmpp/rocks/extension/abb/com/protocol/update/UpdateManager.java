/**
 * Copyright (c) 2010-2020 Contributors to the openHAB project
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.openhab.binding.freeathome.internal.xmpp.rocks.extension.abb.com.protocol.update;

import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.function.Consumer;

import rocks.xmpp.core.session.Manager;
import rocks.xmpp.core.session.XmppSession;
import rocks.xmpp.core.stanza.MessageEvent;
import rocks.xmpp.core.stanza.model.Message;
import rocks.xmpp.extensions.geoloc.model.GeoLocation;
import rocks.xmpp.extensions.pubsub.PubSubManager;
import rocks.xmpp.extensions.pubsub.PubSubService;
import rocks.xmpp.extensions.pubsub.model.Item;
import rocks.xmpp.extensions.pubsub.model.event.Event;
import rocks.xmpp.util.XmppUtils;

/**
 * XML scheme extension for XMPP update events: abb.com.protocol.update
 * Implementation of update element in the http://abb.com/protocol/update namespace
 * as XEP-0163: Personal Eventing Protocol
 * based on https://sco0ter.bitbucket.io/babbler/xep/pep.html
 *
 *
 * <update xmlns='http://abb.com/protocol/update'>
 * <data>
 * DATA
 * </data>
 * </update>
 *
 * @author Stian Kjoglum - Initial contribution
 * @see <a href="http://xmpp.org/extensions/xep-0163.html">XEP-0163: Personal Eventing Protocol</a>
 */
public final class UpdateManager extends Manager {

    private final Set<Consumer<UpdateEvent>> updateListeners = new CopyOnWriteArraySet<>();

    private final Consumer<MessageEvent> messageListener;

    private UpdateManager(XmppSession xmppSession) {
        super(xmppSession, true);

        messageListener = e -> {
            Message message = e.getMessage();
            Event event = message.getExtension(Event.class);
            if (event != null) {
                for (Item item : event.getItems()) {
                    Object payload = item.getPayload();
                    if (payload instanceof GeoLocation) {
                        // Notify the listeners about the reception.
                        XmppUtils.notifyEventListeners(updateListeners,
                                new UpdateEvent(UpdateManager.this, (Update) payload, message.getFrom()));
                    }
                }
            }
        };
    }

    @Override
    protected void onEnable() {
        super.onEnable();
        xmppSession.addInboundMessageListener(messageListener);
    }

    @Override
    protected void onDisable() {
        super.onDisable();
        xmppSession.removeInboundMessageListener(messageListener);
    }

    /**
     * Publishes a geo location to the personal eventing service.
     *
     * @param geoLocation The geo location.
     * @return The async result with the item id, generated by the pubsub service.
     */
    public void publish(Update geoLocation) {
        PubSubService pepService = xmppSession.getManager(PubSubManager.class).createPersonalEventingService();
        pepService.node(Update.NAMESPACE).publish(geoLocation);
    }

    /**
     * Adds a listener, which allows to listen for geo location changes.
     *
     * @param geoLocationListener The listener.
     * @see #removeGeoLocationListener(Consumer)
     */
    public void addUpdateListener(Consumer<UpdateEvent> updateListener) {
        updateListeners.add(updateListener);
    }

    /**
     * Removes a previously added geo location listener.
     *
     * @param geoLocationListener The listener.
     * @see #addGeoLocationListener(Consumer)
     */
    public void removeUpdateListener(Consumer<UpdateEvent> updateListener) {
        updateListeners.remove(updateListener);
    }

    @Override
    protected void dispose() {
        updateListeners.clear();
    }
}
